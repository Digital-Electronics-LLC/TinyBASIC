     1                                          ;
     2                                          ; bootBASIC interpreter in 512 bytes (boot sector)
     3                                          ;
     4                                          ; by Oscar Toledo G.
     5                                          ; http://nanochess.org/
     6                                          ;
     7                                          ; (c) Copyright 2019 Oscar Toledo G.
     8                                          ;
     9                                          ; Creation date: Jul/19/2019. 10pm to 12am.
    10                                          ; Revision date: Jul/20/2019. 10am to 2pm.
    11                                          ;                             Added assignment statement. list now
    12                                          ;                             works. run/goto now works. Added
    13                                          ;                             system and new.
    14                                          ; Revision date: Jul/22/2019. Boot image now includes 'system'
    15                                          ;                             statement.
    16                                          ;
    17                                  
    18                                          ;
    19                                          ; USER'S MANUAL:
    20                                          ;
    21                                          ; Line entry is done with keyboard, finish the line with Enter.
    22                                          ; Only 19 characters per line as maximum.
    23                                          ;
    24                                          ; Backspace can be used, don't be fooled by the fact
    25                                          ; that screen isn't deleted (it's all right in the buffer).
    26                                          ;
    27                                          ; All statements must be in lowercase.
    28                                          ;
    29                                          ; Line numbers can be 1 to 999.
    30                                          ;
    31                                          ; 26 variables are available (a-z)
    32                                          ;
    33                                          ; Numbers (0-65535) can be entered and display as unsigned.
    34                                          ;
    35                                          ; To enter new program lines:
    36                                          ;   10 print "Hello, world!"
    37                                          ;
    38                                          ; To erase program lines:
    39                                          ;   10
    40                                          ;
    41                                          ; To test statements directly (interactive syntax):
    42                                          ;   print "Hello, world!"
    43                                          ;
    44                                          ; To erase the current program:
    45                                          ;   new
    46                                          ;
    47                                          ; To run the current program:
    48                                          ;   run
    49                                          ;
    50                                          ; To list the current program:
    51                                          ;   list
    52                                          ;
    53                                          ; To exit to command-line:
    54                                          ;   system
    55                                          ;
    56                                          ; Statements:
    57                                          ;   var=expr        Assign expr value to var (a-z)
    58                                          ;
    59                                          ;   print expr      Print expression value, new line
    60                                          ;   print expr;     Print expression value, continue
    61                                          ;   print "hello"   Print string, new line
    62                                          ;   print "hello";  Print string, continue
    63                                          ;
    64                                          ;   input var       Input value into variable (a-z)
    65                                          ;
    66                                          ;   goto expr       Goto to indicated line in program
    67                                          ;
    68                                          ;   if expr1 goto expr2
    69                                          ;               If expr1 is non-zero then go to line,
    70                                          ;               else go to following line.
    71                                          ;
    72                                          ; Examples of if:
    73                                          ;
    74                                          ;   if c-5 goto 20  If c isn't 5, go to line 20
    75                                          ;
    76                                          ; Expressions:
    77                                          ;
    78                                          ;   The operators +, -, / and * are available with
    79                                          ;   common precedence rules and signed operation.
    80                                          ;
    81                                          ;   You can also use parentheses:
    82                                          ;
    83                                          ;      5+6*(10/2)
    84                                          ;
    85                                          ;   Variables and numbers can be used in expressions.
    86                                          ;
    87                                          ; Sample program (counting 1 to 10):
    88                                          ;
    89                                          ; 10 a=1
    90                                          ; 20 print a
    91                                          ; 30 a=a+1
    92                                          ; 40 if a-11 goto 20
    93                                          ;
    94                                          ; Sample program (Pascal's triangle, each number is the sum
    95                                          ; of the two over it):
    96                                          ;
    97                                          ; 10 input n
    98                                          ; 20 i=1
    99                                          ; 30 c=1
   100                                          ; 40 j=0
   101                                          ; 50 t=n-i
   102                                          ; 60 if j-t goto 80
   103                                          ; 70 goto 110
   104                                          ; 80 print " ";
   105                                          ; 90 j=j+1
   106                                          ; 100 goto 50
   107                                          ; 110 k=1
   108                                          ; 120 if k-i-1 goto 140
   109                                          ; 130 goto 190
   110                                          ; 140 print c;
   111                                          ; 150 c=c*(i-k)/k
   112                                          ; 160 print " ";
   113                                          ; 170 k=k+1
   114                                          ; 180 goto 120
   115                                          ; 190 print
   116                                          ; 200 i=i+1
   117                                          ; 210 if i-n-1 goto 30
   118                                          ;
   119                                  
   120                                          cpu 8086
   121                                  
   122                                      %ifndef com_file    ; If not defined create a boot sector
   123                                  com_file:       equ 0
   124                                      %endif
   125                                  
   126                                      %if com_file
   127                                          org 0x0100
   128                                      %else
   129                                          org 0x7c00
   130                                      %endif
   131                                  
   132                                  vars:       equ 0x7e00  ; Variables (multiple of 256)
   133                                  running:    equ 0x7e7e  ; Running status
   134                                  line:       equ 0x7e80  ; Line input
   135                                  program:    equ 0x7f00  ; Program address
   136                                  stack:      equ 0xff00  ; Stack address
   137                                  max_line:   equ 1000    ; First unavailable line number
   138                                  max_length: equ 20      ; Maximum length of line
   139                                  max_size:   equ max_line*max_length ; Max. program size
   140                                  
   141                                  start:
   142                                      %if com_file
   143                                      %else
   144 00000000 0E                              push cs         ; For boot sector
   145 00000001 0E                              push cs         ; it needs to setup
   146 00000002 0E                              push cs         ; DS, ES and SS.
   147 00000003 1F                              pop ds
   148 00000004 07                              pop es
   149 00000005 17                              pop ss
   150                                      %endif
   151 00000006 FC                              cld             ; Clear Direction flag
   152 00000007 BF007F                          mov di,program  ; Point to program
   153 0000000A B00D                            mov al,0x0d     ; Fill with CR
   154 0000000C B9204E                          mov cx,max_size ; Max. program size
   155 0000000F F3AA                            rep stosb       ; Initialize
   156                                  
   157                                          ;
   158                                          ; Main loop
   159                                          ;
   160                                  main_loop:
   161 00000011 BC00FF                          mov sp,stack    ; Reinit stack pointer
   162 00000014 B8[1100]                        mov ax,main_loop
   163 00000017 50                              push ax
   164 00000018 31C0                            xor ax,ax       ; Mark as interactive
   165 0000001A A37E7E                          mov [running],ax
   166 0000001D B03E                            mov al,'>'      ; Show prompt
   167 0000001F E85201                          call input_line ; Accept line
   168 00000022 E80601                          call input_number       ; Get number
   169 00000025 09C0                            or ax,ax        ; No number or zero?
   170 00000027 740E                            je statement    ; Yes, jump
   171 00000029 E83F01                          call find_line  ; Find the line
   172 0000002C 97                              xchg ax,di      
   173                                  ;       mov cx,max_length       ; CX loaded with this value in 'find_line'
   174 0000002D F3A4                            rep movsb       ; Copy entered line into program
   175 0000002F C3                              ret
   176                                  
   177                                          ;
   178                                          ; Handle 'if' statement
   179                                          ;
   180                                  if_statement:
   181 00000030 E86D00                          call expr       ; Process expression
   182 00000033 09C0                            or ax,ax        ; Is it zero?
   183 00000035 7459                            je f6           ; Yes, return (ignore if)
   184                                  statement:
   185 00000037 E8D400                          call spaces     ; Avoid spaces
   186 0000003A 803C0D                          cmp byte [si],0x0d  ; Empty line?
   187 0000003D 7451                            je f6           ; Yes, return
   188 0000003F BF[C501]                        mov di,statements   ; Point to statements list
   189 00000042 8A05                    f5:     mov al,[di]     ; Read length of the string
   190 00000044 47                              inc di          ; Avoid length byte
   191 00000045 25FF00                          and ax,0x00ff   ; Is it zero?
   192 00000048 7413                            je f4           ; Yes, jump
   193 0000004A 91                              xchg ax,cx
   194 0000004B 56                              push si         ; Save current position
   195 0000004C F3A6                    f16:    rep cmpsb       ; Compare statement
   196 0000004E 7506                            jne f3          ; Equal? No, jump
   197 00000050 58                              pop ax
   198 00000051 E8BA00                          call spaces     ; Avoid spaces
   199 00000054 FF25                            jmp word [di]   ; Jump to process statement
   200                                  
   201 00000056 01CF                    f3:     add di,cx       ; Advance the list pointer
   202 00000058 47                              inc di          ; Avoid the address
   203 00000059 47                              inc di
   204 0000005A 5E                              pop si
   205 0000005B EBE5                            jmp f5          ; Compare another statement
   206                                  
   207 0000005D E8A700                  f4:     call get_variable       ; Try variable
   208 00000060 50                              push ax         ; Save address
   209 00000061 AC                              lodsb           ; Read a line letter
   210 00000062 3C3D                            cmp al,'='      ; Is it assignment '=' ?
   211 00000064 7434                            je assignment   ; Yes, jump to assignment.
   212                                  
   213                                          ;
   214                                          ; An error happened
   215                                          ;
   216                                  error:
   217 00000066 BE[6E00]                        mov si,error_message
   218 00000069 E82801                          call print_2    ; Show error message
   219 0000006C EBA3                            jmp main_loop   ; Exit to main loop
   220                                  
   221                                  error_message:
   222 0000006E 4023210D                        db "@#!",0x0d   ; Guess the words :P
   223                                  
   224                                          ;
   225                                          ; Handle 'list' statement
   226                                          ;
   227                                  list_statement:
   228 00000072 31C0                            xor ax,ax       ; Start from line zero
   229 00000074 50                      f29:    push ax
   230 00000075 E8F300                          call find_line  ; Find program line
   231 00000078 96                              xchg ax,si
   232 00000079 803C0D                          cmp byte [si],0x0d ; Empty line?
   233 0000007C 740B                            je f30          ; Yes, jump
   234 0000007E 58                              pop ax
   235 0000007F 50                              push ax
   236 00000080 E89300                          call output_number ; Show line number
   237 00000083 AC                      f32:    lodsb           ; Show line contents
   238 00000084 E82901                          call output
   239 00000087 75FA                            jne f32         ; Jump if it wasn't 0x0d (CR)
   240 00000089 58                      f30:    pop ax
   241 0000008A 40                              inc ax          ; Go to next line
   242 0000008B 3DE803                          cmp ax,max_line ; Finished?
   243 0000008E 75E4                            jne f29         ; No, continue
   244                                  f6:
   245 00000090 C3                              ret
   246                                  
   247                                          ;
   248                                          ; Handle 'input' statement
   249                                          ;
   250                                  input_statement:
   251 00000091 E87300                          call get_variable   ; Get variable address
   252 00000094 50                              push ax             ; Save it
   253 00000095 B03F                            mov al,'?'          ; Prompt
   254 00000097 E8DA00                          call input_line     ; Wait for line
   255                                          ;
   256                                          ; Second part of the assignment statement
   257                                          ;
   258                                  assignment:
   259 0000009A E80300                          call expr           ; Process expression
   260 0000009D 5F                              pop di
   261 0000009E AB                              stosw               ; Save onto variable
   262 0000009F C3                              ret
   263                                  
   264                                          ;
   265                                          ; Handle an expression.
   266                                          ; First tier: addition & subtraction.
   267                                          ;
   268                                  expr:
   269 000000A0 E81C00                          call expr1          ; Call second tier
   270 000000A3 803C2D                  f20:    cmp byte [si],'-'   ; Subtraction operator?
   271 000000A6 740E                            je f19              ; Yes, jump
   272 000000A8 803C2B                          cmp byte [si],'+'   ; Addition operator?
   273 000000AB 75E3                            jne f6              ; No, return
   274 000000AD 50                              push ax
   275 000000AE E80D00                          call expr1_2        ; Call second tier
   276 000000B1 59                      f15:    pop cx
   277 000000B2 01C8                            add ax,cx           ; Addition
   278 000000B4 EBED                            jmp f20             ; Find more operators
   279                                  
   280                                  f19:
   281 000000B6 50                              push ax
   282 000000B7 E80400                          call expr1_2        ; Call second tier
   283 000000BA F7D8                            neg ax              ; Negate it (a - b converted to a + -b)
   284 000000BC EBF3                            jmp f15
   285                                  
   286                                          ;
   287                                          ; Handle an expression.
   288                                          ; Second tier: division & multiplication.
   289                                          ;
   290                                  expr1_2:
   291 000000BE 46                              inc si              ; Avoid operator
   292                                  expr1:
   293 000000BF E81F00                          call expr2          ; Call third tier
   294 000000C2 803C2F                  f21:    cmp byte [si],'/'   ; Division operator?
   295 000000C5 740E                            je f23              ; Yes, jump
   296 000000C7 803C2A                          cmp byte [si],'*'   ; Multiplication operator?
   297 000000CA 75C4                            jne f6              ; No, return
   298                                  
   299 000000CC 50                              push ax
   300 000000CD E81000                          call expr2_2        ; Call third tier
   301 000000D0 59                              pop cx
   302 000000D1 F7E9                            imul cx             ; Multiplication
   303 000000D3 EBED                            jmp f21             ; Find more operators
   304                                  
   305                                  f23:
   306 000000D5 50                              push ax
   307 000000D6 E80700                          call expr2_2        ; Call third tier
   308 000000D9 59                              pop cx
   309 000000DA 91                              xchg ax,cx
   310 000000DB 99                              cwd                 ; Expand AX to DX:AX
   311 000000DC F7F9                            idiv cx             ; Signed division
   312 000000DE EBE2                            jmp f21             ; Find more operators
   313                                  
   314                                          ;
   315                                          ; Handle an expression.
   316                                          ; Third tier: parentheses, numbers and vars.
   317                                          ;
   318                                  expr2_2:
   319 000000E0 46                              inc si              ; Avoid operator
   320                                  expr2:
   321 000000E1 E82A00                          call spaces         ; Jump spaces
   322 000000E4 AC                              lodsb               ; Read character
   323 000000E5 3C28                            cmp al,'('          ; Start parenthesis?
   324 000000E7 750D                            jne f24
   325 000000E9 E8B4FF                          call expr           ; Process inner expr.
   326 000000EC 803C29                          cmp byte [si],')'   ; Closing parenthesis?
   327 000000EF 7403E972FF                      jne error           ; No, jump to error
   328 000000F4 EB1D                            jmp spaces_2        ; Yes, avoid spaces
   329                                  
   330 000000F6 3C40                    f24:    cmp al,0x40         ; Variable?
   331 000000F8 7306                            jnc f25             ; Yes, jump
   332 000000FA 4E                              dec si              ; Back one letter...
   333 000000FB E82D00                          call input_number   ; ...to read number
   334 000000FE EB0E                            jmp spaces          ; Avoid spaces
   335                                          
   336 00000100 E80500                  f25:    call get_variable_2 ; Get variable address
   337 00000103 93                              xchg ax,bx
   338 00000104 8B07                            mov ax,[bx]         ; Read
   339 00000106 C3                              ret                 ; Return
   340                                  
   341                                          ;
   342                                          ; Get variable address
   343                                          ;
   344                                  get_variable:
   345 00000107 AC                              lodsb               ; Read source
   346                                  get_variable_2:
   347 00000108 241F                            and al,0x1f         ; 0x61-0x7a -> 0x01-0x1a
   348 0000010A 00C0                            add al,al           ; x 2 (each variable = word)
   349 0000010C B47E                            mov ah,vars>>8      ; Setup high-byte of address
   350                                          ;
   351                                          ; Avoid spaces
   352                                          ;
   353                                  spaces:
   354 0000010E 803C20                          cmp byte [si],' '   ; Space found?
   355 00000111 752D                            jne f22             ; No, return
   356                                          ;
   357                                          ; Avoid spaces after current character
   358                                          ;
   359                                  spaces_2:
   360 00000113 46                              inc si              ; Advance to next character
   361 00000114 EBF8                            jmp spaces
   362                                  
   363                                          ;
   364                                          ; Output unsigned number 
   365                                          ; AX = value
   366                                          ;
   367                                  output_number:
   368                                  f26:
   369 00000116 31D2                            xor dx,dx           ; DX:AX
   370 00000118 B90A00                          mov cx,10           ; Divisor = 10
   371 0000011B F7F1                            div cx              ; Divide
   372 0000011D 09C0                            or ax,ax            ; Nothing at left?
   373 0000011F 52                              push dx
   374 00000120 7403                            je f8               ; No, jump
   375 00000122 E8F1FF                          call f26            ; Yes, output left side
   376 00000125 58                      f8:     pop ax
   377 00000126 0430                            add al,'0'          ; Output remainder as...
   378 00000128 E98500                          jmp output          ; ...ASCII digit
   379                                  
   380                                          ;
   381                                          ; Read number in input
   382                                          ; AX = result
   383                                          ;
   384                                  input_number:
   385 0000012B 31DB                            xor bx,bx           ; BX = 0
   386 0000012D AC                      f11:    lodsb               ; Read source
   387 0000012E 2C30                            sub al,'0'
   388 00000130 3C0A                            cmp al,10           ; Digit valid?
   389 00000132 98                              cbw
   390 00000133 93                              xchg ax,bx
   391 00000134 7309                            jnc f12             ; No, jump
   392 00000136 B90A00                          mov cx,10           ; Multiply by 10
   393 00000139 F7E1                            mul cx
   394 0000013B 01C3                            add bx,ax           ; Add new digit
   395 0000013D EBEE                            jmp f11             ; Continue
   396                                  
   397 0000013F 4E                      f12:    dec si              ; SI points to first non-digit
   398                                  f22:
   399 00000140 C3                              ret
   400                                  
   401                                          ;
   402                                          ; Handle 'system' statement
   403                                          ;
   404                                  system_statement:
   405 00000141 CD20                            int 0x20
   406                                  
   407                                          ;
   408                                          ; Handle 'goto' statement
   409                                          ;
   410                                  goto_statement:
   411 00000143 E85AFF                          call expr           ; Handle expression
   412 00000146 B9                              db 0xb9             ; MOV CX to jump over XOR AX,AX
   413                                  
   414                                          ;
   415                                          ; Handle 'run' statement
   416                                          ; (equivalent to 'goto 0')
   417                                          ;
   418                                  run_statement:
   419 00000147 31C0                            xor ax,ax           
   420                                  f10:
   421 00000149 E81F00                          call find_line      ; Find line in program
   422 0000014C 833E7E7E00              f27:    cmp word [running],0 ; Already running?
   423 00000151 7404                            je f31
   424 00000153 A37E7E                          mov [running],ax    ; Yes, target is new line
   425 00000156 C3                              ret
   426                                  f31:
   427 00000157 50                              push ax
   428 00000158 5E                              pop si
   429 00000159 83C014                          add ax,max_length   ; Point to next line
   430 0000015C A37E7E                          mov [running],ax    ; Save for next time
   431 0000015F E8D5FE                          call statement      ; Process current statement
   432 00000162 A17E7E                          mov ax,[running]
   433 00000165 3D20CD                          cmp ax,program+max_size ; Reached the end?
   434 00000168 75ED                            jne f31             ; No, continue
   435 0000016A C3                              ret                 ; Yes, return
   436                                  
   437                                          ;
   438                                          ; Find line in program
   439                                          ; Entry:
   440                                          ;   ax = line number
   441                                          ; Result:
   442                                          ;   ax = pointer to program
   443                                  find_line:
   444 0000016B B91400                          mov cx,max_length
   445 0000016E F7E1                            mul cx
   446 00000170 05007F                          add ax,program
   447 00000173 C3                              ret
   448                                  
   449                                          ;
   450                                          ; Input line from keyboard
   451                                          ; Entry:
   452                                          ;   al = prompt character
   453                                          ; Result:
   454                                          ;   buffer 'line' contains line, finished with CR
   455                                          ;   SI points to 'line'.
   456                                          ;
   457                                  input_line:
   458 00000174 E83900                          call output
   459 00000177 BE807E                          mov si,line
   460 0000017A 56                              push si
   461 0000017B 5F                              pop di          ; Target for writing line
   462 0000017C E82D00                  f1:     call input_key  ; Read keyboard
   463 0000017F AA                              stosb           ; Save key in buffer
   464 00000180 3C08                            cmp al,0x08     ; Backspace?
   465 00000182 7502                            jne f2          ; No, jump
   466 00000184 4F                              dec di          ; Get back one character
   467 00000185 4F                              dec di
   468 00000186 3C0D                    f2:     cmp al,0x0d     ; CR pressed?
   469 00000188 75F2                            jne f1          ; No, wait another key
   470 0000018A C3                              ret             ; Yes, return
   471                                  
   472                                          ;
   473                                          ; Handle "print" statement
   474                                          ;
   475                                  print_statement:
   476 0000018B AC                              lodsb           ; Read source
   477 0000018C 3C0D                            cmp al,0x0d     ; End of line?
   478 0000018E 7424                            je new_line     ; Yes, generate new line and return
   479 00000190 3C22                            cmp al,'"'      ; Double quotes?
   480 00000192 750B                            jne f7          ; No, jump
   481                                  print_2:
   482                                  f9:
   483 00000194 AC                              lodsb           ; Read string contents
   484 00000195 3C22                            cmp al,'"'      ; Double quotes?
   485 00000197 740D                            je f18          ; Yes, jump
   486 00000199 E81400                          call output     ; Output character
   487 0000019C 75F6                            jne f9          ; Jump if not finished with 0x0d (CR)
   488 0000019E C3                              ret             ; Return
   489                                  
   490 0000019F 4E                      f7:     dec si
   491 000001A0 E8FDFE                          call expr       ; Handle expression
   492 000001A3 E870FF                          call output_number      ; Output result
   493 000001A6 AC                      f18:    lodsb           ; Read next character
   494 000001A7 3C3B                            cmp al,';'      ; Is it semicolon?
   495 000001A9 7509                            jne new_line    ; No, jump to generate new line
   496 000001AB C3                              ret             ; Yes, return
   497                                  
   498                                          ;
   499                                          ; Read a key into al
   500                                          ; Also outputs it to screen
   501                                          ;
   502                                  input_key:
   503 000001AC B400                            mov ah,0x00
   504 000001AE CD16                    	int 0x16
   505                                          ;
   506                                          ; Screen output of character contained in al
   507                                          ; Expands 0x0d (CR) into 0x0a 0x0d (LF CR)
   508                                          ;
   509                                  output:
   510 000001B0 3C0D                            cmp al,0x0d
   511 000001B2 7507                            jne f17
   512                                          ;
   513                                          ; Go to next line (generates LF+CR)
   514                                          ;
   515                                  new_line:
   516 000001B4 B00A                            mov al,0x0a
   517 000001B6 E80200                          call f17
   518 000001B9 B00D                            mov al,0x0d
   519                                  f17:
   520 000001BB B40E                            mov ah,0x0e
   521 000001BD BB0700                          mov bx,0x0007
   522 000001C0 CD10                            int 0x10
   523 000001C2 3C0D                            cmp al,0x0d
   524 000001C4 C3                              ret
   525                                  
   526                                          ;
   527                                          ; List of statements of bootBASIC
   528                                          ; First one byte with length of string
   529                                          ; Then string with statement
   530                                          ; Then a word with the address of the code
   531                                          ;
   532                                  statements:
   533 000001C5 036E6577                        db 3,"new"
   534 000001C9 [0000]                          dw start
   535                                  
   536 000001CB 046C697374                      db 4,"list"
   537 000001D0 [7200]                          dw list_statement
   538                                  
   539 000001D2 0372756E                        db 3,"run"
   540 000001D6 [4701]                          dw run_statement
   541                                  
   542 000001D8 057072696E74                    db 5,"print"
   543 000001DE [8B01]                          dw print_statement
   544                                  
   545 000001E0 05696E707574                    db 5,"input"
   546 000001E6 [9100]                          dw input_statement
   547                                  
   548 000001E8 026966                          db 2,"if"
   549 000001EB [3000]                          dw if_statement
   550                                  
   551 000001ED 04676F746F                      db 4,"goto"
   552 000001F2 [4301]                          dw goto_statement
   553                                  
   554 000001F4 0673797374656D                  db 6,"system"
   555 000001FB [4101]                          dw system_statement
   556                                  
   557 000001FD 00                              db 0
   558                                  
   559                                          ;
   560                                          ; Boot sector filler
   561                                          ;
   562                                      %if com_file
   563                                      %else
   564                                          times 510-($-$$) db 0x4f
   565 000001FE 55AA                            db 0x55,0xaa            ; Make it a bootable sector
   566                                      %endif
   567                                  
